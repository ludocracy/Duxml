var search_data = {"index":{"searchIndex":["duxml","add","addclass","attrnamepattern","attrnamepatternclass","attrvalpattern","attrvalpatternclass","attrsrule","attrsruleclass","change","changeattr","changeattrclass","changeclass","changetext","changetextclass","childpattern","childpatternclass","childrenrule","childrenruleclass","doc","element","elementguts","error","errorclass","grammar","grammarclass","history","historyclass","lazyox","meta","metaclass","newattr","newattrclass","newtext","newtextclass","nodeset","nullchildpatternclass","pattern","patternclass","patternmaker","qualifyerror","qualifyerrorclass","relaxng","remove","removeclass","rngattrsrule","rngchildrenrule","rngvaluerule","rule","ruleclass","saxer","doculiner","spreadsheet","textpattern","textpatternclass","textrule","textruleclass","undo","undoclass","validateerror","validateerrorclass","valuerule","valueruleclass","fixnum","module","object","regexp","reportable","string","<<()","<=>()","<=>()","[]=()","[]=()","abstract?()","abstract?()","abstract?()","abstract?()","abstract?()","add_observer()","add_observer()","applies_to?()","applies_to?()","applies_to?()","applies_to?()","applies_to?()","attr()","attr_name()","child()","child()","concrete?()","constant()","constantize()","cursor()","defined?()","delete()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","each()","end_element()","error?()","get_child_patterns()","get_existing_attr_patterns()","get_null_attr_patterns()","get_null_child_patterns()","get_relationships()","get_rule()","grammar()","grammar=()","history()","history()","history()","history()","identifier()","import()","index()","inspect()","inspect()","inspect()","latest()","line()","line_expr()","load()","log()","meta_path()","method_missing()","method_missing()","name()","name()","name_space()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nmtoken()","nmtokenize()","object()","object()","object()","object()","ordinal()","ordinal_name()","parent()","pass()","qualify()","qualify()","qualify()","qualify()","qualify()","qualify()","relationship()","relationship()","relationship()","relationship()","relationship()","relationship()","relaxng()","relaxng()","relaxng()","relaxng()","relaxng()","remove()","required?()","required_children()","save()","sax()","simple_module()","simple_module()","simple_name()","simple_name()","simple_name()","start_element()","strict?()","suffix()","text()","text()","text()","text()","to_s()","to_s()","to_word()","traverse()","undone_change()","update()","validate()","validate()","value()","value()","value()","write_to()","xml()","xml()","xml()"],"longSearchIndex":["duxml","duxml::add","duxml::addclass","duxml::attrnamepattern","duxml::attrnamepatternclass","duxml::attrvalpattern","duxml::attrvalpatternclass","duxml::attrsrule","duxml::attrsruleclass","duxml::change","duxml::changeattr","duxml::changeattrclass","duxml::changeclass","duxml::changetext","duxml::changetextclass","duxml::childpattern","duxml::childpatternclass","duxml::childrenrule","duxml::childrenruleclass","duxml::doc","duxml::element","duxml::elementguts","duxml::error","duxml::errorclass","duxml::grammar","duxml::grammarclass","duxml::history","duxml::historyclass","duxml::lazyox","duxml::meta","duxml::metaclass","duxml::newattr","duxml::newattrclass","duxml::newtext","duxml::newtextclass","duxml::nodeset","duxml::nullchildpatternclass","duxml::pattern","duxml::patternclass","duxml::patternmaker","duxml::qualifyerror","duxml::qualifyerrorclass","duxml::relaxng","duxml::remove","duxml::removeclass","duxml::rngattrsrule","duxml::rngchildrenrule","duxml::rngvaluerule","duxml::rule","duxml::ruleclass","duxml::saxer","duxml::saxer::doculiner","duxml::spreadsheet","duxml::textpattern","duxml::textpatternclass","duxml::textrule","duxml::textruleclass","duxml::undo","duxml::undoclass","duxml::validateerror","duxml::validateerrorclass","duxml::valuerule","duxml::valueruleclass","fixnum","module","object","regexp","reportable","string","duxml::elementguts#<<()","duxml::change#<=>()","duxml::pattern#<=>()","duxml::elementguts#[]=()","duxml::nodeset#[]=()","duxml::attrnamepattern#abstract?()","duxml::change#abstract?()","duxml::elementguts#abstract?()","duxml::pattern#abstract?()","duxml::valuerule#abstract?()","duxml::grammar#add_observer()","reportable#add_observer()","duxml::attrsrule#applies_to?()","duxml::childrenrule#applies_to?()","duxml::rule#applies_to?()","duxml::textrule#applies_to?()","duxml::valuerule#applies_to?()","duxml::saxer::doculiner#attr()","duxml::attrsrule#attr_name()","duxml::add#child()","duxml::childpattern#child()","duxml::pattern#concrete?()","regexp::constant()","string#constantize()","duxml::saxer::doculiner#cursor()","duxml::grammar#defined?()","duxml::elementguts#delete()","duxml::add#description()","duxml::attrnamepattern#description()","duxml::attrvalpattern#description()","duxml::attrsrule#description()","duxml::change#description()","duxml::changeattr#description()","duxml::changetext#description()","duxml::childpattern#description()","duxml::elementguts#description()","duxml::grammar#description()","duxml::history#description()","duxml::newattr#description()","duxml::newtext#description()","duxml::nullchildpatternclass#description()","duxml::pattern#description()","duxml::qualifyerror#description()","duxml::remove#description()","duxml::rule#description()","duxml::textpattern#description()","duxml::undo#description()","duxml::validateerror#description()","duxml::valuerule#description()","duxml::elementguts#each()","duxml::saxer::doculiner#end_element()","duxml::error#error?()","duxml::patternmaker#get_child_patterns()","duxml::patternmaker#get_existing_attr_patterns()","duxml::patternmaker#get_null_attr_patterns()","duxml::patternmaker#get_null_child_patterns()","duxml::patternmaker#get_relationships()","duxml::grammar#get_rule()","duxml::history#grammar()","duxml::meta#grammar=()","duxml::elementguts#history()","duxml::grammar#history()","duxml::nodeset#history()","duxml::rule#history()","regexp::identifier()","duxml::grammar::import()","duxml::nullchildpatternclass#index()","duxml::elementguts#inspect()","duxml::grammar#inspect()","duxml::history#inspect()","duxml::history#latest()","duxml::change#line()","duxml::newtext#line_expr()","duxml#load()","duxml#log()","duxml::meta::meta_path()","duxml::lazyox#method_missing()","string#method_missing()","duxml::grammar#name()","duxml::pattern#name()","duxml::elementguts#name_space()","duxml::addclass::new()","duxml::attrnamepatternclass::new()","duxml::attrvalpatternclass::new()","duxml::attrsruleclass::new()","duxml::changeattrclass::new()","duxml::changeclass::new()","duxml::changetextclass::new()","duxml::childpatternclass::new()","duxml::childrenruleclass::new()","duxml::doc::new()","duxml::element::new()","duxml::errorclass::new()","duxml::grammarclass::new()","duxml::historyclass::new()","duxml::metaclass::new()","duxml::newattrclass::new()","duxml::newtextclass::new()","duxml::nodeset::new()","duxml::nullchildpatternclass::new()","duxml::patternclass::new()","duxml::removeclass::new()","duxml::ruleclass::new()","duxml::saxer::doculiner::new()","duxml::textpatternclass::new()","duxml::valueruleclass::new()","regexp::nmtoken()","string#nmtokenize()","duxml::add#object()","duxml::childpattern#object()","duxml::newtext#object()","duxml::pattern#object()","fixnum#ordinal()","fixnum#ordinal_name()","duxml::add#parent()","duxml::attrsrule#pass()","duxml::attrsrule#qualify()","duxml::childrenrule#qualify()","duxml::grammar#qualify()","duxml::rule#qualify()","duxml::textrule#qualify()","duxml::valuerule#qualify()","duxml::attrnamepattern#relationship()","duxml::attrvalpattern#relationship()","duxml::attrsrule#relationship()","duxml::childpattern#relationship()","duxml::nullchildpatternclass#relationship()","duxml::pattern#relationship()","duxml#relaxng()","duxml::relaxng#relaxng()","duxml::rngattrsrule#relaxng()","duxml::rngchildrenrule#relaxng()","duxml::rngvaluerule#relaxng()","duxml::elementguts#remove()","duxml::attrsrule#required?()","duxml::childrenrule#required_children()","duxml#save()","duxml::saxer#sax()","module#simple_module()","object#simple_module()","duxml::pattern#simple_name()","module#simple_name()","object#simple_name()","duxml::saxer::doculiner#start_element()","duxml::history#strict?()","fixnum#suffix()","duxml::changetext#text()","duxml::newtext#text()","duxml::saxer::doculiner#text()","duxml::textpattern#text()","duxml::doc#to_s()","duxml::elementguts#to_s()","fixnum#to_word()","duxml::elementguts#traverse()","duxml::undo#undone_change()","duxml::history#update()","duxml#validate()","duxml::grammar#validate()","duxml::attrvalpattern#value()","duxml::changeattr#value()","duxml::newattr#value()","duxml::doc#write_to()","duxml::grammar::xml()","duxml::history::xml()","duxml::meta::xml()"],"info":[["Duxml","","Duxml.html","",""],["Duxml::Add","","Duxml/Add.html","",""],["Duxml::AddClass","","Duxml/AddClass.html","","<p>created when an doc gains a child\n"],["Duxml::AttrNamePattern","","Duxml/AttrNamePattern.html","",""],["Duxml::AttrNamePatternClass","","Duxml/AttrNamePatternClass.html","","<p>pattern representing relationship between an object and one of its\nattributes\n"],["Duxml::AttrValPattern","","Duxml/AttrValPattern.html","",""],["Duxml::AttrValPatternClass","","Duxml/AttrValPatternClass.html","","<p>pattern representing relationship between an object&#39;s attribute and its\nvalue\n"],["Duxml::AttrsRule","","Duxml/AttrsRule.html","",""],["Duxml::AttrsRuleClass","","Duxml/AttrsRuleClass.html","","<p>rule that states what attribute names a given object is allowed to have\n"],["Duxml::Change","","Duxml/Change.html","",""],["Duxml::ChangeAttr","","Duxml/ChangeAttr.html","",""],["Duxml::ChangeAttrClass","","Duxml/ChangeAttrClass.html","","<p>created when Element has an attribute already and its value has been\nchanged\n"],["Duxml::ChangeClass","","Duxml/ChangeClass.html","","<p>do not use - only for subclassing changes represent events i.e. patterns\nwith a fixed position in time, …\n"],["Duxml::ChangeText","","Duxml/ChangeText.html","",""],["Duxml::ChangeTextClass","","Duxml/ChangeTextClass.html","","<p>created when doc has text and text has been changed\n"],["Duxml::ChildPattern","","Duxml/ChildPattern.html","",""],["Duxml::ChildPatternClass","","Duxml/ChildPatternClass.html","","<p>pattern representing relationship between an object and its child\n"],["Duxml::ChildrenRule","","Duxml/ChildrenRule.html","",""],["Duxml::ChildrenRuleClass","","Duxml/ChildrenRuleClass.html","","<p>rule that states what children and how many a given element is allowed to\nhave\n"],["Duxml::Doc","","Duxml/Doc.html","",""],["Duxml::Element","","Duxml/Element.html","",""],["Duxml::ElementGuts","","Duxml/ElementGuts.html","",""],["Duxml::Error","","Duxml/Error.html","",""],["Duxml::ErrorClass","","Duxml/ErrorClass.html","","<p>do not use except to subclass\n"],["Duxml::Grammar","","Duxml/Grammar.html","",""],["Duxml::GrammarClass","","Duxml/GrammarClass.html","","<p>contains Duxml::Rules and can apply them by validating XML or qualifying\nuser input reporting Duxml::Errors …\n"],["Duxml::History","","Duxml/History.html","",""],["Duxml::HistoryClass","","Duxml/HistoryClass.html","",""],["Duxml::LazyOx","","Duxml/LazyOx.html","",""],["Duxml::Meta","","Duxml/Meta.html","",""],["Duxml::MetaClass","","Duxml/MetaClass.html","","<p>all XML files ready by Duxml have a metadata file generated with a\nmodified, matching file name @see …\n"],["Duxml::NewAttr","","Duxml/NewAttr.html","",""],["Duxml::NewAttrClass","","Duxml/NewAttrClass.html","","<p>created when doc gains a new attribute\n"],["Duxml::NewText","","Duxml/NewText.html","",""],["Duxml::NewTextClass","","Duxml/NewTextClass.html","","<p>created when object had no children or text and text has been added\n"],["Duxml::NodeSet","","Duxml/NodeSet.html","",""],["Duxml::NullChildPatternClass","","Duxml/NullChildPatternClass.html","","<p>null child patterns represent and parent child relationship where the child\nis required by the Grammar …\n"],["Duxml::Pattern","","Duxml/Pattern.html","",""],["Duxml::PatternClass","","Duxml/PatternClass.html","",""],["Duxml::PatternMaker","","Duxml/PatternMaker.html","","<p>methods to create Patterns from a given Element&#39;s relationships with\nits members\n"],["Duxml::QualifyError","","Duxml/QualifyError.html","",""],["Duxml::QualifyErrorClass","","Duxml/QualifyErrorClass.html","","<p>created when grammar detects error from user input\n"],["Duxml::RelaxNG","","Duxml/RelaxNG.html","",""],["Duxml::Remove","","Duxml/Remove.html","",""],["Duxml::RemoveClass","","Duxml/RemoveClass.html","","<p>created when doc loses a child\n"],["Duxml::RngAttrsRule","","Duxml/RngAttrsRule.html","",""],["Duxml::RngChildrenRule","","Duxml/RngChildrenRule.html","",""],["Duxml::RngValueRule","","Duxml/RngValueRule.html","",""],["Duxml::Rule","","Duxml/Rule.html","",""],["Duxml::RuleClass","","Duxml/RuleClass.html","",""],["Duxml::Saxer","","Duxml/Saxer.html","",""],["Duxml::Saxer::DocuLiner","","Duxml/Saxer/DocuLiner.html","",""],["Duxml::Spreadsheet","","Duxml/Spreadsheet.html","",""],["Duxml::TextPattern","","Duxml/TextPattern.html","",""],["Duxml::TextPatternClass","","Duxml/TextPatternClass.html","","<p>pattern representing relationship between an object and its text-only child\n"],["Duxml::TextRule","","Duxml/TextRule.html","",""],["Duxml::TextRuleClass","","Duxml/TextRuleClass.html","",""],["Duxml::Undo","","Duxml/Undo.html","",""],["Duxml::UndoClass","","Duxml/UndoClass.html","","<p>created when a previous change is undone\n"],["Duxml::ValidateError","","Duxml/ValidateError.html","",""],["Duxml::ValidateErrorClass","","Duxml/ValidateErrorClass.html","","<p>created when grammar detects error from file\n"],["Duxml::ValueRule","","Duxml/ValueRule.html","",""],["Duxml::ValueRuleClass","","Duxml/ValueRuleClass.html","","<p>rule that states what values a given attribute name is allowed to have\n"],["Fixnum","","Fixnum.html","","<p>Copyright © 2016 Freescale Semiconductor Inc.\n"],["Module","","Module.html","","<p>Copyright © 2016 Freescale Semiconductor Inc.\n"],["Object","","Object.html","",""],["Regexp","","Regexp.html","","<p>Copyright © 2016 Freescale Semiconductor Inc.\n"],["Reportable","","Reportable.html","",""],["String","","String.html","",""],["<<","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-3C-3C","(obj)","<p>@see Ox::Element#&lt;&lt; this override reports changes to history; NewText\nfor Strings, Add for elements …\n"],["<=>","Duxml::Change","Duxml/Change.html#method-i-3C-3D-3E","(obj)","<p>@return [-1,0,1,nil] compares dates of changes\n"],["<=>","Duxml::Pattern","Duxml/Pattern.html#method-i-3C-3D-3E","(pattern)","<p>@param pattern [Duxml::Pattern] pattern or any subclass object @return\n[Fixnum] first applies &lt;=&gt; …\n"],["[]=","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-5B-5D-3D","(attr_sym, val)","<p>@param attr_sym [String, Symbol] name of attribute @param val [String]\n@return [Element] self\n"],["[]=","Duxml::NodeSet","Duxml/NodeSet.html#method-i-5B-5D-3D","(index, str)",""],["abstract?","Duxml::AttrNamePattern","Duxml/AttrNamePattern.html#method-i-abstract-3F","()","<p>@return [Boolean] true if subject does not have the attr_name; false\notherwise\n"],["abstract?","Duxml::Change","Duxml/Change.html#method-i-abstract-3F","()",""],["abstract?","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-abstract-3F","()","<p>@return [Boolean] whether or not this has been written to file\n"],["abstract?","Duxml::Pattern","Duxml/Pattern.html#method-i-abstract-3F","()","<p>@return [Boolean] if either subject or object points to a name/type i.e.\nnot an Element\n"],["abstract?","Duxml::ValueRule","Duxml/ValueRule.html#method-i-abstract-3F","()","<p>@return [true]\n"],["add_observer","Duxml::Grammar","Duxml/Grammar.html#method-i-add_observer","(obj, sym=nil)","<p>@param obj [Object] object that will observe this grammar&#39;s rules,\nusually the History\n"],["add_observer","Reportable","Reportable.html#method-i-add_observer","(obs, sym=nil)","<p>@param obs [Object] observer to add to this Element as well as its NodeSet\n"],["applies_to?","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-applies_to-3F","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nthat rule may apply to @return …\n"],["applies_to?","Duxml::ChildrenRule","Duxml/ChildrenRule.html#method-i-applies_to-3F","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Pattern, Duxml::Change] change or pattern\nto be evaluated @return [Boolean] …\n"],["applies_to?","Duxml::Rule","Duxml/Rule.html#method-i-applies_to-3F","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nthat rule may apply to @return …\n"],["applies_to?","Duxml::TextRule","Duxml/TextRule.html#method-i-applies_to-3F","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nthat rule may apply to @return …\n"],["applies_to?","Duxml::ValueRule","Duxml/ValueRule.html#method-i-applies_to-3F","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nthat rule may apply to @return …\n"],["attr","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-i-attr","(name, val)",""],["attr_name","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-attr_name","()","<p>@return [String] name of attribute to which this rule applies\n"],["child","Duxml::Add","Duxml/Add.html#method-i-child","()",""],["child","Duxml::ChildPattern","Duxml/ChildPattern.html#method-i-child","()","<p>@return [Element] child element\n"],["concrete?","Duxml::Pattern","Duxml/Pattern.html#method-i-concrete-3F","()","<p>@return [Boolean] if both subject and at least one object point to an\nactual XML Element\n"],["constant","Regexp","Regexp.html#method-c-constant","()","<p>@return [Regexp] Ruby constant e.g. Constant, CONSTANT\n"],["constantize","String","String.html#method-i-constantize","()","<p>@return [String] converts string into Ruby constant. self must be String\nwith no whitespaces and match …\n"],["cursor","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-i-cursor","()",""],["defined?","Duxml::Grammar","Duxml/Grammar.html#method-i-defined-3F","()","<p>@return [Boolean] whether or not any rules have been defined yet in this\ngrammar\n"],["delete","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-delete","(obj)","<p>TODO do we need this method to take Fixnum node index as well? @param obj\n[Element] element child to …\n"],["description","Duxml::Add","Duxml/Add.html#method-i-description","()",""],["description","Duxml::AttrNamePattern","Duxml/AttrNamePattern.html#method-i-description","()",""],["description","Duxml::AttrValPattern","Duxml/AttrValPattern.html#method-i-description","()",""],["description","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-description","()","<p>@return [String] description of self; overrides super to account for cases\nof missing, required attributes …\n"],["description","Duxml::Change","Duxml/Change.html#method-i-description","()","<p>@return [String] gives its time stamp\n"],["description","Duxml::ChangeAttr","Duxml/ChangeAttr.html#method-i-description","()","<p>@return [String] self description\n"],["description","Duxml::ChangeText","Duxml/ChangeText.html#method-i-description","()","<p>@return [String] self description\n"],["description","Duxml::ChildPattern","Duxml/ChildPattern.html#method-i-description","()","<p>@return [String] description of this child pattern\n"],["description","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-description","()","<p>@return [String] self description\n"],["description","Duxml::Grammar","Duxml/Grammar.html#method-i-description","()","<p>@return [String] lists XML schema and content rules in order of precedence\n"],["description","Duxml::History","Duxml/History.html#method-i-description","()",""],["description","Duxml::NewAttr","Duxml/NewAttr.html#method-i-description","()","<p>@return [String] self description\n"],["description","Duxml::NewText","Duxml/NewText.html#method-i-description","()","<p>@return [String] self description\n"],["description","Duxml::NullChildPatternClass","Duxml/NullChildPatternClass.html#method-i-description","()","<p>@return [String] description of this child pattern\n"],["description","Duxml::Pattern","Duxml/Pattern.html#method-i-description","()","<p>@return [String] “#{object.description} is #{relationship} of\n#{subject.description}”\n"],["description","Duxml::QualifyError","Duxml/QualifyError.html#method-i-description","()",""],["description","Duxml::Remove","Duxml/Remove.html#method-i-description","()","<p>@return [String] describes removal event\n"],["description","Duxml::Rule","Duxml/Rule.html#method-i-description","()","<p>@return [String] default description for a Rule\n"],["description","Duxml::TextPattern","Duxml/TextPattern.html#method-i-description","()",""],["description","Duxml::Undo","Duxml/Undo.html#method-i-description","()",""],["description","Duxml::ValidateError","Duxml/ValidateError.html#method-i-description","()",""],["description","Duxml::ValueRule","Duxml/ValueRule.html#method-i-description","()","<p>@return [String] description of this rule\n"],["each","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-each","(&block)","<p>traverse through just the children of this node\n<p>@param &amp;block [block] code to execute for each child …\n"],["end_element","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-i-end_element","(name)",""],["error?","Duxml::Error","Duxml/Error.html#method-i-error-3F","()",""],["get_child_patterns","Duxml::PatternMaker","Duxml/PatternMaker.html#method-i-get_child_patterns","(node)","<p>@param node [Duxml::Element] object whose relationships are to be made into\npatterns @return [Array[Duxml::ChildPattern, …\n"],["get_existing_attr_patterns","Duxml::PatternMaker","Duxml/PatternMaker.html#method-i-get_existing_attr_patterns","(node)","<p>@param node [Duxml::Element] doc whose relationships are to be made into\npatterns @return [Array[Duxml::AttrNamePattern, …\n"],["get_null_attr_patterns","Duxml::PatternMaker","Duxml/PatternMaker.html#method-i-get_null_attr_patterns","(node)","<p>@param node [Element] doc whose relationships are to be made into patterns\n@return [Array] one pattern …\n"],["get_null_child_patterns","Duxml::PatternMaker","Duxml/PatternMaker.html#method-i-get_null_child_patterns","(node)","<p>@param node [Duxml::Element] doc whose relationships are to be made into\npatterns @return [Array] one …\n"],["get_relationships","Duxml::PatternMaker","Duxml/PatternMaker.html#method-i-get_relationships","(node)","<p>@param node [Duxml::Element] doc whose relationships are to be made into\npatterns @return [Array] array …\n"],["get_rule","Duxml::Grammar","Duxml/Grammar.html#method-i-get_rule","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nto be qualified @return [ …\n"],["grammar","Duxml::History","Duxml/History.html#method-i-grammar","()","<p>@return [GrammarClass] grammar that is observing this history&#39;s events\n"],["grammar=","Duxml::Meta","Duxml/Meta.html#method-i-grammar-3D","(g)",""],["history","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-history","()","<p>@return [HistoryClass] history that is observing this element for changes\n"],["history","Duxml::Grammar","Duxml/Grammar.html#method-i-history","()","<p>@return [History] history that this grammar is currently reporting to\n"],["history","Duxml::NodeSet","Duxml/NodeSet.html#method-i-history","()",""],["history","Duxml::Rule","Duxml/Rule.html#method-i-history","()","<p>@return [HistoryClass] history to which this rule will report errors\n"],["identifier","Regexp","Regexp.html#method-c-identifier","()","<p>@return [Regexp] C identifier e.g. ident_ifier0, excluding &#39;true&#39;\nand &#39;false&#39;\n"],["import","Duxml::Grammar","Duxml/Grammar.html#method-c-import","(path)",""],["index","Duxml::NullChildPatternClass","Duxml/NullChildPatternClass.html#method-i-index","()","<p>@return [-1] class must respond to #index; only NullChildPatternClass is\nallowed to have a negative index …\n"],["inspect","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-inspect","()",""],["inspect","Duxml::Grammar","Duxml/Grammar.html#method-i-inspect","()",""],["inspect","Duxml::History","Duxml/History.html#method-i-inspect","()",""],["latest","Duxml::History","Duxml/History.html#method-i-latest","()",""],["line","Duxml::Change","Duxml/Change.html#method-i-line","()","<p>@return [Fixnum] line number of changed object; -l if not applicable\n"],["line_expr","Duxml::NewText","Duxml/NewText.html#method-i-line_expr","()",""],["load","Duxml","Duxml.html#method-i-load","(_file, grammar_path=nil)","<p>@param file [String, Doc] loads given file or document and finds or creates\ncorresponding metadata file …\n"],["log","Duxml","Duxml.html#method-i-log","(file)","<p>@param file [String] output file path for logging human-readable validation\nerror messages\n"],["meta_path","Duxml::Meta","Duxml/Meta.html#method-c-meta_path","(path)","<p>@return [String] name of metadata file based on content file&#39;s name\ne.g.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;design.xml&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;.design.xml.duxml&#39;</span>\n</pre>\n"],["method_missing","Duxml::LazyOx","Duxml/LazyOx.html#method-i-method_missing","(sym, *args, &block)","<p>welcome to Lazy-Ox - where any method that doesn&#39;t exist, you can\ncreate on the fly and assign its …\n"],["method_missing","String","String.html#method-i-method_missing","(sym, *args)","<p>@param sym [Symbol] name of Regexp class method to check against self\n@param *args [nil] must be empty …\n"],["name","Duxml::Grammar","Duxml/Grammar.html#method-i-name","()",""],["name","Duxml::Pattern","Duxml/Pattern.html#method-i-name","()","<p>@return [String] nmtoken name of this pattern e.g. ChildPattern.new(parent,\nchild).name =&gt; &#39;duxml:child_pattern&#39; …\n"],["name_space","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-name_space","()","<p>@return [String] namespace of element, derived from name e.g.\n&#39;&lt;duxml:element&gt;&#39; =&gt; &#39;duxml&#39; …\n"],["new","Duxml::AddClass","Duxml/AddClass.html#method-c-new","(_subject, _index)",""],["new","Duxml::AttrNamePatternClass","Duxml/AttrNamePatternClass.html#method-c-new","(_subject, _attr_name)","<p>@param _subject [Duxml::Element] subject doc @param _attr_name [String]\nname of attribute\n"],["new","Duxml::AttrValPatternClass","Duxml/AttrValPatternClass.html#method-c-new","(_subject, _attr_name)","<p>@param _subject [Element] subject element @param _attr_name [String] name\nof attribute whose value is …\n"],["new","Duxml::AttrsRuleClass","Duxml/AttrsRuleClass.html#method-c-new","(_subject, attrs, required='#IMPLIED')","<p>@param _subject [String] name of the doc @param attrs [String] the\nattribute name pattern in Regexp form …\n"],["new","Duxml::ChangeAttrClass","Duxml/ChangeAttrClass.html#method-c-new","(_subject, _attr_name, _old_value)","<p>@param _subject [Duxml::Element] parent doc whose attribute changed @param\n_attr_name [String] name of …\n"],["new","Duxml::ChangeClass","Duxml/ChangeClass.html#method-c-new","(_subject, *args)","<p>all subclasses of Change must call this super method or implement the same\nfunction within their #initialize …\n"],["new","Duxml::ChangeTextClass","Duxml/ChangeTextClass.html#method-c-new","(_subject, _index, _old_text)","<p>@param _subject [Duxml::Element] parent doc whose text has changed @param\n_index [Fixnum] index of parent&#39;s …\n"],["new","Duxml::ChildPatternClass","Duxml/ChildPatternClass.html#method-c-new","(_subject, _index)","<p>@param _subject [Duxml::Element] parent element @param _index [Fixnum]\nindex of child\n"],["new","Duxml::ChildrenRuleClass","Duxml/ChildrenRuleClass.html#method-c-new","(_subject, _statement)","<p>child rules are initialized from DTD doc declarations e.g.\n(zeroOrMore|other-first-child)*,second-child-optional?,third-child-gt1+ …\n"],["new","Duxml::Doc","Duxml/Doc.html#method-c-new","(prolog={})",""],["new","Duxml::Element","Duxml/Element.html#method-c-new","(name, _line_or_content=nil, _col_or_children=nil)","<p>operates in two modes:\n<p>from Ruby\n<p>from file\n"],["new","Duxml::ErrorClass","Duxml/ErrorClass.html#method-c-new","(_rule, _change_or_pattern)","<p>@param _rule [Rule] rule that was violated @param _change_or_pattern\n[ChangeClass, PatternClass] can …\n"],["new","Duxml::GrammarClass","Duxml/GrammarClass.html#method-c-new","(rules=[])","<p>@param rules [[RuleClass]] optional, can initialize grammar with rules\n"],["new","Duxml::HistoryClass","Duxml/HistoryClass.html#method-c-new","(harsh_or_kind = true)",""],["new","Duxml::MetaClass","Duxml/MetaClass.html#method-c-new","(grammar_path=nil)","<p>@param grammar_path [String] optional path of grammar file which can be a\nspreadsheet or Duxml::Grammar …\n"],["new","Duxml::NewAttrClass","Duxml/NewAttrClass.html#method-c-new","(_subject, _attr_name)","<p>@param _subject [Duxml::Element] parent doc @param _attr_name\n"],["new","Duxml::NewTextClass","Duxml/NewTextClass.html#method-c-new","(_subject, _index)","<p>@param _subject [Duxml::Element] doc that has gained new text @param _index\n[Fixnum] index of new text …\n"],["new","Duxml::NodeSet","Duxml/NodeSet.html#method-c-new","(_parent, ary=[])",""],["new","Duxml::NullChildPatternClass","Duxml/NullChildPatternClass.html#method-c-new","(_subject, _missing_child)","<p>@param _subject [Element] parent element @param _missing_child [String]\nnmtoken for missing child element …\n"],["new","Duxml::PatternClass","Duxml/PatternClass.html#method-c-new","(subj)",""],["new","Duxml::RemoveClass","Duxml/RemoveClass.html#method-c-new","(_subject, _child)","<p>@param _subject [Dux::Element] parent doc that lost child @param _child\n[Dux::Element] removed child; …\n"],["new","Duxml::RuleClass","Duxml/RuleClass.html#method-c-new","(subj, _statement)","<p>@param subj [String] NMTOKEN name of element this rule applies to @param\n_statement [String, Regexp] …\n"],["new","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-c-new","(doc, _observer)","<p>@param doc [Ox::Document] document that is being constructed as XML is\nparsed @param _observer [Object] …\n"],["new","Duxml::TextPatternClass","Duxml/TextPatternClass.html#method-c-new","(_subject, _index)","<p>@param _subject [Ox::Element] parent of text node @param _index [Fixnum]\nindex of text node\n"],["new","Duxml::ValueRuleClass","Duxml/ValueRuleClass.html#method-c-new","(_attr_name, _statement)","<p>@param _attr_name [String] the attribute name @param _statement [String]\ndata type or expression of the …\n"],["nmtoken","Regexp","Regexp.html#method-c-nmtoken","()","<p>@return [Regexp] XML NMTOKEN e.g xml:attribute, also-valid, CDATA\n"],["nmtokenize","String","String.html#method-i-nmtokenize","()","<p>@return [String] does reverse of #constantize e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Foo_b&#39;</span>.<span class=\"ruby-identifier\">nmtokenize</span>  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;foo-bar&#39;</span>\n<span class=\"ruby-string\">&#39;FooBar&#39;</span>.<span class=\"ruby-identifier\">nmtokenize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["object","Duxml::Add","Duxml/Add.html#method-i-object","()",""],["object","Duxml::ChildPattern","Duxml/ChildPattern.html#method-i-object","()",""],["object","Duxml::NewText","Duxml/NewText.html#method-i-object","()",""],["object","Duxml::Pattern","Duxml/Pattern.html#method-i-object","()",""],["ordinal","Fixnum","Fixnum.html#method-i-ordinal","()","<p>@return [String] short string ordinal e.g. 3.ordinal =? &#39;third&#39;\n"],["ordinal_name","Fixnum","Fixnum.html#method-i-ordinal_name","()","<p>@return [String] full name of ordinal number e.g. 4281.ordinal_name =&gt;\n&#39;four thousand and two-hundred …\n"],["parent","Duxml::Add","Duxml/Add.html#method-i-parent","()",""],["pass","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-pass","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] change or pattern\nto be evaluated @return [Boolean] …\n"],["qualify","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-qualify","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Pattern] checks an doc of type\nchange_or_pattern.subject against change_or_pattern …\n"],["qualify","Duxml::ChildrenRule","Duxml/ChildrenRule.html#method-i-qualify","(change_or_pattern)","<p>@param change_or_pattern [Duxml::ChildPattern, Duxml::Add, Duxml::Remove]\nto be evaluated to see if it …\n"],["qualify","Duxml::Grammar","Duxml/Grammar.html#method-i-qualify","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Change, Duxml::Pattern] applies applicable\nrule type and subject\n\n<pre>to given ...</pre>\n"],["qualify","Duxml::Rule","Duxml/Rule.html#method-i-qualify","(change_or_pattern)","<p>Duxml::Rule&#39;s #qualify is only used to report errors found by its\nsubclasses&#39; #qualify methods …\n"],["qualify","Duxml::TextRule","Duxml/TextRule.html#method-i-qualify","(change_or_pattern)","<p>applies Regexp statement to text content of this node; returns false if\ncontent has XML\n"],["qualify","Duxml::ValueRule","Duxml/ValueRule.html#method-i-qualify","(change_or_pattern)","<p>@param change_or_pattern [Duxml::Pattern, Duxml::Change] change or pattern\nto be evaluated @return [Boolean] …\n"],["relationship","Duxml::AttrNamePattern","Duxml/AttrNamePattern.html#method-i-relationship","()",""],["relationship","Duxml::AttrValPattern","Duxml/AttrValPattern.html#method-i-relationship","()",""],["relationship","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-relationship","()",""],["relationship","Duxml::ChildPattern","Duxml/ChildPattern.html#method-i-relationship","()","<p>@return [String] describes relationship between parent and child\n"],["relationship","Duxml::NullChildPatternClass","Duxml/NullChildPatternClass.html#method-i-relationship","()",""],["relationship","Duxml::Pattern","Duxml/Pattern.html#method-i-relationship","()","<p>returns relationship description as string by subtracting super class name\n(e.g. &#39;pattern&#39; or …\n"],["relaxng","Duxml","Duxml.html#method-i-relaxng","()","<p>@return [Nokogiri::XML::RelaxNG] current metadata&#39;s grammar as a\nrelaxng file\n"],["relaxng","Duxml::RelaxNG","Duxml/RelaxNG.html#method-i-relaxng","(output_path=nil)","<p>@param output_path [String] optional, output path for .rng file @return\n[Nokogiri::XML::RelaxNG] RelaxNG …\n"],["relaxng","Duxml::RngAttrsRule","Duxml/RngAttrsRule.html#method-i-relaxng","(parent)","<p>@param parent [Nokogiri::XML::Node] should be &lt;grammar&gt; @return\n[Nokogiri::XML::Node] parent, but …\n"],["relaxng","Duxml::RngChildrenRule","Duxml/RngChildrenRule.html#method-i-relaxng","(parent)","<p>@param parent [Ox::Element] parent from RelaxNG document under construction\n(should be &lt;grammar/&gt;) …\n"],["relaxng","Duxml::RngValueRule","Duxml/RngValueRule.html#method-i-relaxng","(parent)","<p>@param parent [Nokogiri::XML::Node] &lt;grammar&gt; i.e. parent node in\nRelaxNG document, NOT this Rule&#39;s …\n"],["remove","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-remove","(obj)",""],["required?","Duxml::AttrsRule","Duxml/AttrsRule.html#method-i-required-3F","()","<p>@return [Boolean] whether or not this attribute is required\n"],["required_children","Duxml::ChildrenRule","Duxml/ChildrenRule.html#method-i-required_children","()","<p>@return [Array] in order, array of child doc types required by this rule\n"],["save","Duxml","Duxml.html#method-i-save","(file)","<p>@param file [String] saves current content XML to given file path\n(Duxml@file by default)\n"],["sax","Duxml::Saxer","Duxml/Saxer.html#method-i-sax","(path, obs=nil)","<p>@param path [String] path of file to parse @return [Doc] finished document\nwith each Element&#39;s line …\n"],["simple_module","Module","Module.html#method-i-simple_module","()",""],["simple_module","Object","Object.html#method-i-simple_module","()",""],["simple_name","Duxml::Pattern","Duxml/Pattern.html#method-i-simple_name","()","<p>@return [String] nmtoken name of this pattern without namespace prefix e.g.\nChildPattern.new(parent, …\n"],["simple_name","Module","Module.html#method-i-simple_name","()",""],["simple_name","Object","Object.html#method-i-simple_name","()",""],["start_element","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-i-start_element","(name)",""],["strict?","Duxml::History","Duxml/History.html#method-i-strict-3F","(harsh_or_kind=nil)","<p>@return [Boolean] toggles (true by default) whether History will raise\nexception or tolerate qualify …\n"],["suffix","Fixnum","Fixnum.html#method-i-suffix","()",""],["text","Duxml::ChangeText","Duxml/ChangeText.html#method-i-text","()","<p>@return [String] new content (subsequent changes may mean this new content\nno longer exists in its original …\n"],["text","Duxml::NewText","Duxml/NewText.html#method-i-text","()",""],["text","Duxml::Saxer::DocuLiner","Duxml/Saxer/DocuLiner.html#method-i-text","(str)",""],["text","Duxml::TextPattern","Duxml/TextPattern.html#method-i-text","()",""],["to_s","Duxml::Doc","Duxml/Doc.html#method-i-to_s","()",""],["to_s","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-to_s","()","<p>@return [String] XML string (overrides Ox&#39;s to_s which just prints the\nobject pointer)\n"],["to_word","Fixnum","Fixnum.html#method-i-to_word","()","<p>@return [String] full name of number e.g. 200058.to_word =&gt;\n&#39;two-hundred thousand and fifty-eight&#39; …\n"],["traverse","Duxml::ElementGuts","Duxml/ElementGuts.html#method-i-traverse","(&block)","<p>pre-order traverse through this node and all of its descendants\n<p>@param &amp;block [block] code to execute …\n"],["undone_change","Duxml::Undo","Duxml/Undo.html#method-i-undone_change","()","<p>returns previous change instance that was undone\n"],["update","Duxml::History","Duxml/History.html#method-i-update","(type, *args)","<p>receives reports from interface of changes or from Duxml::Rule violations\n"],["validate","Duxml","Duxml.html#method-i-validate","(*args)","<p>@param *Args [*several_variants] @see #load @return [Boolean] whether file\npassed validation\n"],["validate","Duxml::Grammar","Duxml/Grammar.html#method-i-validate","(node)","<p>@param node [Duxml::Object] applies grammar rules to all relationships of\nthe given object @result [Boolean] …\n"],["value","Duxml::AttrValPattern","Duxml/AttrValPattern.html#method-i-value","()","<p>current value of this attribute\n"],["value","Duxml::ChangeAttr","Duxml/ChangeAttr.html#method-i-value","()","<p>@return [String] new value of attribute\n"],["value","Duxml::NewAttr","Duxml/NewAttr.html#method-i-value","()","<p>@return [String] value of the new attribute\n"],["write_to","Duxml::Doc","Duxml/Doc.html#method-i-write_to","(path)",""],["xml","Duxml::Grammar","Duxml/Grammar.html#method-c-xml","()","<p>@return [Element] returns self as XML element e.g.\n&#39;&lt;duxml:grammar/&gt;&#39;\n"],["xml","Duxml::History","Duxml/History.html#method-c-xml","()","<p>used when creating a new metadata file for a static XML file\n<p>@return [Element] XML element for a new &lt;duxml:history&gt; …\n"],["xml","Duxml::Meta","Duxml/Meta.html#method-c-xml","()","<p>@return [Doc] metadata document\n"]]}}